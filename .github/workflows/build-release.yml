name: Build Release Packages
on: [push]

# env:
  # Hard-coded for testing
  # BB_VERSION: 1.2.0

jobs:
  build-ubuntu-x86-64:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ci-workflow

      - name: Get Version Number
        id: version_number
        run: |
          ls -la
          echo "::set-output name=BB_VERSION::$(cat ${{ github.workspace }}/VERSION)"

      - name: Install Prerequisites
        run: sudo apt install -y libgmp-dev libnuma-dev

      - name: Build
        env:
          BB_VERSION: ${{ steps.version_number.outputs.BB_VERSION }}
        run: |
          mkdir build && cd build
          cmake ..
          cmake --build . --target bladebit --config Release
          chmod +x ./bladebit
          tar -czvf bladebit-v${BB_VERSION}-ubuntu-x86-64.tar.gz bladebit
          mkdir ../artifacts
          mv bladebit-v${BB_VERSION}-ubuntu-x86-64.tar.gz ../artifacts/
          ls -la ../artifacts
      
      - name: Upload Artifact Ubuntu x86-64
        uses: actions/upload-artifact@v2
        with:
          name: bladebit-v${{ steps.version_number.outputs.BB_VERSION }}-ubuntu-x86-64.tar.gz
          path: ${{ github.workspace }}/artifacts/bladebit-v${{ steps.version_number.outputs.BB_VERSION }}-ubuntu-x86-64.tar.gz
          if-no-files-found: error

  # build-windows-x86-64:
  #   runs-on: windows-2019
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: master

  #     - name: Build
  #       shell: bash
  #       run: |
  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build . --target bladebit --config Release

  #         cd Release
  #         7z.exe a -tzip ../bladebit-v${BB_VERSION}-windows-x86-64.zip bladebit.exe
  #         cd ..
  #         ls -la
