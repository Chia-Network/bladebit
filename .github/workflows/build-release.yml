name: Build Release Packages
on: [push]
# on:
#   release:
#     types: [created]

# env:
#   BB_VERSION: 1.2.0 # Hard-coded for testing

jobs:
  artifact-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ci-workflow

      - name: Get Version Number
        id: version_number
        run: echo "::set-output name=BB_VERSION::$(cat ${{ github.workspace }}/VERSION)"

      # Setup Node
      - uses: actions/setup-node@v2
        with: { node-version: '14' }
      - run: cd .github/actions && npm install @octokit/action

      # Download Artifacts for Version
      - name: Download Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BB_VERSION: ${{ steps.version_number.outputs.BB_VERSION }}
        run: |

          artifacts=(
            bladebit-v${BB_VERSION}-ubuntu-arm64.tar.gz
          )

          mkdir -p bin

          for artifact_name in "${artifacts[@]}"; do
            
            echo "Fetching $artifact_name"
            url=$(node .github/actions/artifacts.mjs get-artifact-url $artifact_name)
            echo "URL: $url"
            
            curl -o "bin/${artifact_name}.zip"
            ls -la bin

            unzip -d bin "bin/${artifact_name}.zip"
            ls -la bin
          done


          # cd bin
          # curl -O -J "$url"
          # ls -la
      
      # - name: Download Artifacts for Release
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: bladebit-v${{ steps.version_number.outputs.BB_VERSION }}-ubuntu-arm64.tar.gz
      #     path: bin/
          
      - run: ls -la bin


  #     # - name: Upload Artifacts as Release Assets
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   run: |
  #     #     node .github/actions/artifacts.mjs upload-release-asset \
  #     #       $BB_VERSION \
  #     #       bladebit-v${BB_VERSION}-ubuntu-x86-64.tar.gz
 

 
  # build-ubuntu-x86-64:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ci-workflow

  #     - name: Get Version Number
  #       id: version_number
  #       run: |
  #         version=$(cat VERSION)
  #         echo "::set-output name=BB_VERSION::$version"
  #         echo "::set-output name=BB_ARTIFACT_NAME::bladebit-v${version}-ubuntu-x86-64.tar.gz"

  #     - name: Install Prerequisites
  #       run: sudo apt install -y libgmp-dev libnuma-dev

  #     - name: Build
  #       env:
  #         BB_ARTIFACT_NAME: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #       run: |
          
  #         # TODO: Use specific GCC version
  #         gcc --version

  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build . --target bladebit --config Release -j $(nproc --all)
  #         chmod +x ./bladebit
  #         tar -czvf $BB_ARTIFACT_NAME bladebit
  #         mkdir ../bin
  #         mv $BB_ARTIFACT_NAME ../bin/
  #         ls -la ../bin
      
  #     - name: Upload Artifact Ubuntu x86-64
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         path: ${{ github.workspace }}/bin/${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         if-no-files-found: error

  # build-centos-x86-64:
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: centos:8
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ci-workflow

  #     - name: Get Version Number
  #       id: version_number
  #       run: |
  #         version=$(cat VERSION)
  #         echo "::set-output name=BB_VERSION::$version"
  #         echo "::set-output name=BB_ARTIFACT_NAME::bladebit-v${version}-centos-x86-64.tar.gz"

  #     - name: Build
  #       env:
  #         BB_ARTIFACT_NAME: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #       run: |
          
  #         dnf install -y gcc-toolset-9-gcc gcc-toolset-9-gcc-c++ \
  #                        cmake gmp-devel numactl-devel make git

  #         source /opt/rh/gcc-toolset-9/enable

  #         gcc --version

  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build . --target bladebit --config Release -j $(nproc --all)
  #         chmod +x ./bladebit
  #         tar -czvf $BB_ARTIFACT_NAME bladebit
  #         mkdir ../bin
  #         mv $BB_ARTIFACT_NAME ../bin/
  #         ls -la ../bin
      
  #     - name: Upload Artifact CentOS x86-64
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         path: ${{ github.workspace }}/bin/${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         if-no-files-found: error

  # build-ubuntu-arm64:
  #   runs-on: [ ARM64 ]
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ci-workflow

  #     - name: Get Version Number
  #       id: version_number
  #       run: |
  #         version=$(cat ${{ github.workspace }}/VERSION)
  #         echo "::set-output name=BB_VERSION::$version"
  #         echo "::set-output name=BB_ARTIFACT_NAME::bladebit-v${version}-ubuntu-arm64.tar.gz"

  #     - name: Install Prerequisites
  #       run: sudo apt install -y libgmp-dev libnuma-dev

  #     - name: Build
  #       env:
  #         BB_ARTIFACT_NAME: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #       run: |
  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build . --target bladebit --config Release
  #         chmod +x ./bladebit
  #         tar -czvf $BB_ARTIFACT_NAME bladebit
  #         mkdir ../bin
  #         mv $BB_ARTIFACT_NAME ../bin/
  #         ls -la ../bin
      
  #     - name: Upload Artifact Ubuntu ARM64
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         path: ${{ github.workspace }}/bin/${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         if-no-files-found: error

  #     - name: Clean Up
  #       run: |
  #         rm -rf ${{ github.workspace }}/*

  # build-centos-arm64:
  #   runs-on: [ARM64]
  #   container:
  #     image: centos:8
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ci-workflow

  #     - name: Get Version Number
  #       id: version_number
  #       run: |
  #         version=$(cat VERSION)
  #         echo "::set-output name=BB_VERSION::$version"
  #         echo "::set-output name=BB_ARTIFACT_NAME::bladebit-v${version}-centos-arm64.tar.gz"

  #     - name: Build
  #       env:
  #         BB_ARTIFACT_NAME: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #       run: |
          
  #         dnf install -y gcc-toolset-9-gcc gcc-toolset-9-gcc-c++ \
  #                        cmake gmp-devel numactl-devel make git

  #         source /opt/rh/gcc-toolset-9/enable

  #         gcc --version

  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build . --target bladebit --config Release -j $(nproc --all)
  #         chmod +x ./bladebit
  #         tar -czvf $BB_ARTIFACT_NAME bladebit
  #         mkdir ../bin
  #         mv $BB_ARTIFACT_NAME ../bin/
  #         ls -la ../bin
      
  #     - name: Upload Artifact CentOS ARM64
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         path: ${{ github.workspace }}/bin/${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         if-no-files-found: error

  # build-windows-x86-64:
  #   runs-on: windows-2019
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ci-workflow

  #     - name: Get Version Number
  #       shell: bash
  #       id: version_number
  #       run: |
  #         ls -la
  #         version=$(cat VERSION)
  #         echo "::set-output name=BB_VERSION::$version"
  #         echo "::set-output name=BB_ARTIFACT_NAME::bladebit-v${version}-windows-x86-64.zip"

  #     - name: Build
  #       shell: bash
  #       env:
  #         BB_ARTIFACT_NAME: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #       run: |
  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build . --target bladebit --config Release
          
  #         mkdir ../bin
  #         cd Release
  #         7z.exe a -tzip ../../bin/${BB_ARTIFACT_NAME} bladebit.exe
  #         ls -la ../../bin

  #     - name: Upload Artifact Windows x86-64
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         path: ${{ github.workspace }}/bin/${{ steps.version_number.outputs.BB_ARTIFACT_NAME }}
  #         if-no-files-found: error
